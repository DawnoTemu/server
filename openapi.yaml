openapi: 3.0.3
info:
  title: StoryVoice API
  description: |
    This is the API specification for the StoryVoice application, which allows users to clone their voice 
    and use it to narrate children's stories. The API provides endpoints for user authentication, 
    voice cloning, story access, and audio synthesis.
  version: 1.0.0
  contact:
    email: api@storyvoice.app

servers:
  - url: https://api.storyvoice.app
    description: Production server
  - url: http://localhost:8000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the /auth/login or /auth/refresh endpoints

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        email_confirmed:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-03-19T14:22:35.982Z"
        last_login:
          type: string
          format: date-time
          example: "2025-03-23T14:30:15.651Z"

    Story:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Hansel and Gretel"
        author:
          type: string
          example: "Brothers Grimm"
        description:
          type: string
          example: "A classic fairy tale about two children who discover a house made of candy..."
        content:
          type: string
          example: "Once upon a time..."
        cover_path:
          type: string
          example: "/stories/1/cover"
        created_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"

    StoryList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          title:
            type: string
            example: "Hansel and Gretel"
          author:
            type: string
            example: "Brothers Grimm"
          description:
            type: string
            example: "A classic fairy tale about two children who discover a house made of candy..."
          cover_path:
            type: string
            example: "/stories/1/cover"
          created_at:
            type: string
            format: date-time
            example: "2025-01-15T10:30:00Z"
          updated_at:
            type: string
            format: date-time
            example: "2025-01-15T10:30:00Z"

    Voice:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "My Voice"
        elevenlabs_voice_id:
          type: string
          example: "pNInz6obpgDQGcFmaJgB"
        user_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-03-20T15:45:22Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-03-20T15:45:22Z"

    VoiceList:
      type: array
      items:
        $ref: '#/components/schemas/Voice'

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: "Description of the error"
        details:
          type: string
          example: "Detailed error information"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "secure_password"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOi..."
        refresh_token:
          type: string
          example: "eyJhbGciOi..."
        user:
          $ref: '#/components/schemas/User'

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - password_confirm
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "secure_password"
        password_confirm:
          type: string
          format: password
          example: "secure_password"

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: "Registration successful. Please check your email to confirm your account."

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: "eyJhbGciOi..."

    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOi..."

    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    ResetPasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: "Password reset link has been sent to your email."

    NewPasswordRequest:
      type: object
      required:
        - new_password
        - new_password_confirm
      properties:
        new_password:
          type: string
          format: password
          example: "new_secure_password"
        new_password_confirm:
          type: string
          format: password
          example: "new_secure_password"

    NewPasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: "Password has been reset successfully. You can now log in with your new password."

    ConfirmEmailResponse:
      type: object
      properties:
        message:
          type: string
          example: "Email confirmed successfully. You can now log in."

    VoiceSampleResponse:
      type: object
      properties:
        url:
          type: string
          format: uri
          example: "https://s3.amazonaws.com/storyvoice/samples/..."

    AudioSynthesisResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        url:
          type: string
          format: uri
          example: "https://s3.amazonaws.com/storyvoice/audio/..."

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid request (missing fields or passwords don't match)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      description: Authenticate a user and receive JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          description: Missing refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get the profile information of the currently authenticated user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/confirm-email/{token}:
    get:
      tags:
        - Authentication
      summary: Confirm email
      description: Confirm a user's email address using the token sent via email
      operationId: confirmEmail
      parameters:
        - name: token
          in: path
          description: Email confirmation token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmEmailResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password-request:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Request a password reset email
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Request processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        '400':
          description: Missing email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password/{token}:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset a user's password using a token received via email
      operationId: resetPassword
      parameters:
        - name: token
          in: path
          description: Password reset token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPasswordResponse'
        '400':
          description: Invalid request or token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stories:
    get:
      tags:
        - Stories
      summary: List all stories
      description: Get a list of all available stories
      operationId: listStories
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryList'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stories/{story_id}:
    get:
      tags:
        - Stories
      summary: Get story details
      description: Get the details of a specific story
      operationId: getStory
      parameters:
        - name: story_id
          in: path
          description: ID of the story
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
        '404':
          description: Story not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stories/{story_id}/cover:
    get:
      tags:
        - Stories
      summary: Get story cover image
      description: Get the cover image for a story (redirects to image URL)
      operationId: getStoryCover
      parameters:
        - name: story_id
          in: path
          description: ID of the story
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '302':
          description: Redirect to image URL
        '404':
          description: Cover image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /voices:
    get:
      tags:
        - Voices
      summary: List user's voices
      description: Get all voice clones created by the authenticated user
      operationId: listVoices
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Voices
      summary: Create voice clone
      description: Create a new voice clone from an audio sample
      operationId: createVoice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Audio file (WAV or MP3, maximum 30 seconds)
                name:
                  type: string
                  description: Optional name for the voice
      responses:
        '200':
          description: Voice clone created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  voice_id:
                    type: string
                    example: "pNInz6obpgDQGcFmaJgB"
                  name:
                    type: string
                    example: "My Voice"
        '400':
          description: Invalid request (missing file or invalid file type)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Voice cloning failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /voices/{voice_id}:
    get:
      tags:
        - Voices
      summary: Get voice details
      description: Get details of a specific voice clone
      operationId: getVoice
      security:
        - bearerAuth: []
      parameters:
        - name: voice_id
          in: path
          description: ID of the voice
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voice'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (voice belongs to a different user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Voice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Voices
      summary: Delete voice
      description: Delete a voice clone and all associated audio files
      operationId: deleteVoice
      security:
        - bearerAuth: []
      parameters:
        - name: voice_id
          in: path
          description: ID of the voice
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (voice belongs to a different user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Voice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /voices/{voice_id}/sample:
    get:
      tags:
        - Voices
      summary: Get voice sample
      description: Get the original voice sample used for cloning
      operationId: getVoiceSample
      security:
        - bearerAuth: []
      parameters:
        - name: voice_id
          in: path
          description: ID of the voice
          required: true
          schema:
            type: integer
            format: int64
        - name: redirect
          in: query
          description: If "true", redirects directly to the audio URL
          required: false
          schema:
            type: string
            enum: ["true", "false"]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceSampleResponse'
        '302':
          description: Redirect to audio URL (when redirect=true)
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (voice belongs to a different user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Voice or sample not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /voices/{elevenlabs_voice_id}/stories/{story_id}/audio:
    head:
      tags:
        - Audio
      summary: Check audio existence
      description: Check if audio has been generated for a specific voice and story
      operationId: checkAudioExists
      security:
        - bearerAuth: []
      parameters:
        - name: elevenlabs_voice_id
          in: path
          description: ElevenLabs ID of the voice
          required: true
          schema:
            type: string
        - name: story_id
          in: path
          description: ID of the story
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Audio exists
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (voice belongs to a different user)
        '404':
          description: Audio does not exist
    get:
      tags:
        - Audio
      summary: Get audio file
      description: Stream or redirect to audio for a story read in a specific voice
      operationId: getAudio
      security:
        - bearerAuth: []
      parameters:
        - name: elevenlabs_voice_id
          in: path
          description: ElevenLabs ID of the voice
          required: true
          schema:
            type: string
        - name: story_id
          in: path
          description: ID of the story
          required: true
          schema:
            type: integer
            format: int64
        - name: redirect
          in: query
          description: If "true", redirects to S3 URL instead of streaming
          required: false
          schema:
            type: string
            enum: ["true", "false"]
        - name: expires
          in: query
          description: Expiration time in seconds for the URL if redirecting (default = 3600)
          required: false
          schema:
            type: integer
            format: int32
            default: 3600
      responses:
        '200':
          description: Full content
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
        '206':
          description: Partial content (when Range header is used)
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
        '302':
          description: Redirect (when redirect=true)
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (voice belongs to a different user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Audio not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Audio
      summary: Generate audio
      description: Generate audio for a story with a specific voice
      operationId: generateAudio
      security:
        - bearerAuth: []
      parameters:
        - name: elevenlabs_voice_id
          in: path
          description: ElevenLabs ID of the voice
          required: true
          schema:
            type: string
        - name: story_id
          in: path
          description: ID of the story
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Audio generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioSynthesisResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (voice belongs to a different user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Voice or story not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Generation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'